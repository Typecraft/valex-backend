from functools import reduce

from django.core.management import BaseCommand

from lexicon.models import ValenceFrame

tags = [
    "EXPL",
    "EXPL+[INF:rais"
    "EXPL+adpos",
    "EXPL+adpos+PP[S",
    "EXPL+adpos+S",
    "EXPL+APpred+INF",
    "EXPL+APpred+PP",
    "EXPL+APpred+S",
    "EXPL+INF",
    "EXPL+INF:equiOBJ",
    "EXPL+INF:equiSBJ",
    "EXPL+NP",
    "EXPL+NP+adpos",
    "EXPL+NP+INF",
    "EXPL+NP+INF:equiSBJ",
    "EXPL+NP+NP",
    "EXPL+NP+NP+INF",
    "EXPL+NP+NP+S",
    "EXPL+NP+S",
    "EXPL+NPpred+INF",
    "EXPL+NPpred+S",
    "EXPL+PARTPpred+S",
    "EXPL+PP",
    "EXPL+PP+INF",
    "EXPL+PP[INF",
    "EXPL+PP[S",
    "EXPL+PPpred+S",
    "EXPL+S",
    "INF",
    "INF+APpred",
    "INF+INF",
    "INF+NP",
    "INF+NP+NP",
    "INF+NP+NPgen",
    "INF+NP+PP",
    "INF+NPdat+NP",
    "INF+NPpred",
    "INF+PARTPpred",
    "INF+PPpred",
    "inherentCompNP+NP+NP",
    "NP",
    "NP+adpos",
    "NP+adpos+INF:equiSBJ",
    "NP+adpos+INF:equiSBJ",
    "NP+adpos+NP",
    "NP+adpos+PARTPpred",
    "NP+adpos+PP",
    "NP+adpos+PP[INF:equiSBJ",
    "NP+adpos+PP[INF:raisSBJ",
    "NP+adpos+S",
    "NP+ADVPpred",
    "NP+APpred",
    "NP+APpred+adpos",
    "NP+EXPL+APpred+S",
    "NP+EXPL+INF",
    "NP+EXPL+S",
    "NP+INF",
    "NP+INF",
    "NP+INF:equiSBJ",
    "NP+INF:raisingOBJ",
    "NP+INF:raisingSBJ",
    "NP+NP",
    "NP+NP++ADVPpredSBJ",
    "NP+NP+ADVPpred",
    "NP+NP+APpred",
    "NP+NP+INF:equi:OBJ",
    "NP+NP+INF:equi:SBJ",
    "NP+NP+INF:rais:OBJ",
    "NP+NP+INF:rais:SBJ",
    "NP+NP+NP",
    "NP+NP+NP+PP",
    "NP+NP+NPpred",
    "NP+NP+PP",
    "NP+NP+PP[INF",
    "NP+NP+PP[INF:equiOBJ",
    "NP+NP+PP[INF:equiSBJ",
    "NP+NP+PP[INF:raisOBJ",
    "NP+NP+PP[S",
    "NP+NP+PPpred",
    "NP+NP+PRTP[INF:raisOBJ",
    "NP+NP+PRTPpred",
    "NP+NP+PRTPpred",
    "NP+NP+PRTPpredSBJ",
    "NP+NP+S",
    "NP+NPdat+NP",
    "NP+NPdat+NP+PP",
    "NP+NPpred",
    "NP+NPpred",
    "NP+NPrefl",
    "NP+NPrefl+adpos",
    "NP+NPrefl+ADVpred",
    "NP+NPrefl+APpred",
    "Np+NPrefl+APpred+adpos",
    "NP+NPrefl+INF",
    "NP+NPrefl+INF:equi:OBJ",
    "NP+NPrefl+INF:equiSBJ",
    "NP+NPrefl+INF:raisSBJ",
    "NP+NPrefl+NP",
    "NP+NPrefl+NPpred",
    "NP+NPrefl+PP",
    "NP+NPrefl+PP[INF",
    "NP+NPrefl+PP[INF:equiSBJ",
    "NP+NPrefl+PP[INF:raisOBJ",
    "NP+NPrefl+PPpred",
    "NP+NPrefl+PRTP[INF:raisOBJ",
    "NP+NPrefl+PRTPpred",
    "NP+NPrefl+S",
    "NP+phrasalVerb",
    "NP+PP",
    "NP+PP[INF",
    "NP+PP[INF:equiSBJ",
    "NP+PP[INF:raisSBJ",
    "NP+PP[S",
    "NP+PPpred",
    "NP+PRTPpred",
    "NP+PTCP",
    "NP+S",
    "NPdat",
    "S",
    "S+APpred",
    "S+idiomatic",
    "S+NP",
    "S+NP+APpred",
    "S+NP+NP",
    "S+NP+S",
    "S+NPpred",
    "S+PARTPpred",
    "S+PP",
    "S+PP+NP",
    "S+PPpred",
]


class Command(BaseCommand):
    help = 'Populates the ValenceFrame table with tags'

    def add_arguments(self, parser):
        pass

    def handle(self, *args, **options):
        valence_frames = []
        for tag in tags:
            valence_frames.append(ValenceFrame(name=tag))

        ValenceFrame.objects.bulk_create(valence_frames)

